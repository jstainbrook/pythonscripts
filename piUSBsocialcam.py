#!/usr/bin/env python
# piUSBsocialcam script - author:  hyperjoule, jstainbrook@hyperjoule.io, http://www.hyperjoule.io 2019
# requires pimoroni button shim -- https://www.adafruit.com/product/3582 see comments for libraries to install

import signal
import buttonshim # pip/pip3 install buttonshim
import subprocess
import time
import json
import base64
import email, smtplib, ssl # sudo pip/pip3 install email; pip/pip3 install smtplib; sudo pip/pip3 install ssl; sudo pip/pip3 install email
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# importing the requests library 
import requests # sudo pip/pip3 install requests
import datetime


####################################################################################################################################
# User configured variables
# set these to your WP login and application password using WP plugin 'Application Passwords'
user = 'admin' # your WP Account Name
password = 'XXXX XXXX XXXX XXXX XXXX XXXX' # generated by plugin Application Password, not your wordpress password
token = base64.standard_b64encode((user + ':' + password).encode('utf-8')) # we have to encode the usr and pw
headers = {'Authorization': 'Basic ' + token.decode('utf-8')}
url = 'http://XXX.YOURWORDPRESSSITE.XXX/wp-json/wp/v2' # wordpress upload url
motionurl = 'http://localhost:8081' # url set up for motion
imagedir = '/home/pi/images/' # directory of image, with trailing '/' - make sure directory has write and read permissions
pre = 'cat_' # prefix to file name
streamurl = 'rtmp://x.rtmp.youtube.com/live2/YOUR_KEY_HERE' # your youtube channel live key link
heightwidth = '640x480' # height/width for webcam stream
#
# Don't touch anything under this line!
####################################################################################################################################

# globals that don't need user config
button_was_held = False
motion_on = False
stream_on = False
instructions="""
# USBCam headless pi management script - author:  hyperjoule, jstainbrook@hyperjoule.io http://www.hyperjoule.io 2019
# requires pimoni button shim -- install with pip/pip3 install buttonshim
# requires request library -- install with pip/pip3 install requests

This script performs one-touch button management of the USB Camera.

Press Ctrl+C to exit.

BTN A On 3 second long press safely shuts down pi.
BTN B On short press starts the Motion service. (must have installed Motion with: sudo apt-get install motion). Any other button will stop Motion if started.
BTN C Streams to configured streaming server (must have compiled ffmpeg - https://blog.veloc1ty.de/2018/10/29/raspberry-pi-3-stream-webcam-to-twitch/)
BTN D On short press takes a photo and sends to configured WordPress site (must have Application Passwords plugin: https://wordpress.org/plugins/application-passwords/)
BTN E On short press sends an email via gmail smtp server (must enter gmail user name and password, i.e. user@gmail.com for From address when prompted)

"""

#init - flashes the neopixel and prints instructions
buttonshim.set_pixel(0,0,0)
buttonshim.set_pixel(188, 244, 66)
print(instructions)
time.sleep(1)
buttonshim.set_pixel(0,0,0)

# Button A - Safe shutdown function triggered only on long press - short press shows instructions 
@buttonshim.on_press(buttonshim.BUTTON_A)
def press_handler(button, pressed):
    global button_was_held    # So we change the global var defined above
    button_was_held = False   # Reset the button held state


@buttonshim.on_release(buttonshim.BUTTON_A)
def release_handler(button, pressed):
    if not button_was_held:
        global instructions
        buttonshim.set_pixel(235, 66, 244)
        print("To start safe shutdown, hold button for 3 seconds.")       
        time.sleep(.5)
        buttonshim.set_pixel(0,0,0)
        time.sleep(.5)
        buttonshim.set_pixel(188, 244, 66)
        print(instructions)   
        time.sleep(1)
        buttonshim.set_pixel(0,0,0)
        
@buttonshim.on_hold(buttonshim.BUTTON_A, hold_time=5)

def hold_handler(button):
    buttonshim.set_pixel(244, 66, 66)
    time.sleep(.5)
    buttonshim.set_pixel(0, 0, 0)
    time.sleep(.5)
    buttonshim.set_pixel(244, 66, 66)
    time.sleep(.5)
    buttonshim.set_pixel(0, 0, 0)
    subprocess.call('sudo shutdown -h now', shell=True);

# Button B - Start Motion Service 
@buttonshim.on_press(buttonshim.BUTTON_B)
def button_B(button, pressed):
    buttonshim.set_pixel(0, 255, 255)
    global motionurl
    global motion_on
    global stream_on
    if stream_on:
        print("Shutting down Stream to start Motion Service.")
        subprocess.call('sudo kill $(ps aux | grep "[f]fmpeg" | awk "{print $2}")', shell=True); 
        stream_on = False
    if not motion_on:
        print("Starting Motion Service.")
        subprocess.call('sudo service motion start', shell=True);          
        time.sleep(1)
        print("Motion service started.  View webcam at " + motionurl)
        buttonshim.set_pixel(0,0,0)
        motion_on = True
    else:
        print("Motion service already running.  View webcam at " + motionurl)
        buttonshim.set_pixel(0,0,0)

# Button C - Start webcam stream - requires ffmpeg
@buttonshim.on_press(buttonshim.BUTTON_C)
def button_C(button, pressed):
    buttonshim.set_pixel(0, 0, 255)
    global motion_on
    global stream_on
    global streamurl
    global heightwidth
    if stream_on:
        print("Stream is already running.")
    if motion_on:
        motion_on = False
        subprocess.call('sudo service motion stop', shell=True);    
        print("Shutting down Motion service before starting stream.")
    time.sleep(.5)
    print("Starting stream to " + streamurl)
    subprocess.call('ffmpeg -f video4linux2 -s '+ heightwidth +' -framerate 16 -i /dev/video0 -c:v h264_omx -threads 0 -an -ar 0 -f flv "'+ streamurl +'"')
    buttonshim.set_pixel(0, 0, 0)

# Button D - Upload image to Wordpress
@buttonshim.on_press(buttonshim.BUTTON_D)
def button_D(button, pressed):
    global headers
    global imagedir  
    global pre
    # shut down motion service if started
    global motion_on
    global stream_on
    if stream_on:
        print("Shutting down Stream to start Motion Service.")
        subprocess.call('sudo kill $(ps aux | grep "[f]fmpeg" | awk "{print $2}")', shell=True); 
        stream_on = False    
    if motion_on:
        motion_on = False
        subprocess.call('sudo service motion stop', shell=True);    
        print("Shutting down Motion service before taking photo for upload.")
    buttonshim.set_pixel(255, 255, 0)
    # shut down the motion service if started

    print("Taking photo and sending to " + url)
    ts = time.time()
    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d_%H:%M:%S')
    fileName = imagedir + pre + st + '.jpg'
    subprocess.call('fswebcam '+fileName, shell=True);          
    print("Photo saved to "+fileName+".  Uploading to Wordpress site at "+url)    
    media = {'file': open(fileName,'rb')}  
    image = requests.post(url + '/media', headers=headers, files=media)
    link = json.loads(image.content.decode('utf-8'))['link']
    postid =json.loads(image.content.decode('utf-8'))['id']
    print('Your image is published on {} with ID {}'.format(link, postid))
    print('')
    buttonshim.set_pixel(0, 0, 0)

@buttonshim.on_press(buttonshim.BUTTON_E)
def button_e(button, pressed):
    buttonshim.set_pixel(255, 0, 0)
    # shut down motion service if started
    global motion_on
    global stream_on
    global imagedir  
    global pre 
    if stream_on:
        print("Shutting down Stream to start Motion Service.")
        subprocess.call('sudo kill $(ps aux | grep "[f]fmpeg" | awk "{print $2}")', shell=True); 
        stream_on = False    
    if motion_on:
        motion_on = False
        subprocess.call('sudo service motion stop', shell=True);  
        print("Shutting down Motion service before taking photo for email.")
    emailfrom = input('Gmail From: (i.e.: user@gmail.com): ')
    password = input("Gmail Password: ")
    emailto = input('Email To: ')
    subject = input('Subject: ')
    body = input('Body of Text: ')
    # Create a multipart message and set headers
    message = MIMEMultipart()
    message["From"] = emailfrom
    message["To"] = emailto
    message["Subject"] = subject 
    # Add body to email
    message.attach(MIMEText(body, "plain"))
    # Take picture
    print("Taking photo and sending to " + emailto)
    ts = time.time()
    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d_%H:%M:%S')
    fileName = imagedir + pre + st + '.jpg'
    subprocess.call('fswebcam '+fileName, shell=True);          
    print("Photo saved to "+fileName+".  Sending through gmail to "+emailto)   
    # Open image file in binary mode
    with open(fileName, "rb") as attachment:
        # Add file as application/octet-stream
        # Email client can usually download this automatically as attachment
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())

    # Encode file in ASCII characters to send by email    
    encoders.encode_base64(part)

    # Add header as key/value pair to attachment part
    part.add_header(
        "Content-Disposition",
        "attachment; filename= {fileName}",
    )

    # Add attachment to message and convert message to string
    message.attach(part)
    text = message.as_string()

    # Log in to server using secure context and send email
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
        server.login(emailfrom, password)
        server.sendmail(emailfrom, emailto, text) 
        print("Photo sent!")  
    time.sleep(1)
    buttonshim.set_pixel(0, 0, 0)


signal.pause()
